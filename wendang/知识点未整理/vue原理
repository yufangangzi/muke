1.实现observer
function observer(data){
	if(!data&& typeof data !=='object'){
		return 
	}
	Object.keys(data).forEach(function(key){
		defineReactive(data,key,data[key])
	})
}

function defineReactive(data,key,val){
	var dep = new Dep()
	observer(data)
	Object.definePropety(data,key,{
		enumerable:true,
		configurable:false,
		get: function() {
			// 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除
        	Dep.target && dep.addDep(Dep.target);
            return val;
        },
        set: function(newVal) {
            console.log('哈哈哈，监听到值变化了 ', val, ' --> ', newVal);
            val = newVal;
            dep.notify(); // 通知所有订阅者
        }
	})
}

2.实现订阅器
 function Dep(){
 	this.subs=[]
 }
 Dep.prototype={
 	addSub:function(sub){
 		this.subs.push(sub);
 	},
 	notify:function(){
 		this.subs.forEach(function(sub){
 			sub.update()
 		})
 	}
 }